
# 选项
options:
  attributeColumns: &attributeColumns
    - key: name
      name: 参数
      align: left
      width: 150
    - key: description
      name: 说明
      align: left
    - key: type
      name: 类型
      align: left
      width: 250
    - key: option
      name: 可选值
      defaultValue: —
      align: left
      width: 250
    - key: default
      name: 默认值
      defaultValue: —
      align: left
      width: 150
  eventColumns: &eventColumns
    - key: name
      name: 参数
      align: left
      width: 150
    - key: description
      name: 说明
      align: left
    - key: callback
      name: 回调参数
      defaultValue: —
      align: left
      width: 400
# 示例视图
display:
  - key: 1-1
    name: 基础用法
    layout: vertical
    active: vue
    tabPanes:
      - key: vue
        name: Vue
        codemirror:
          type: text/x-vue
          code: |
            <template>
              <web-form-item
                type="codemirror"
                :width="width"
                :value="value"
                :options="options"
                />  
            <template>

            <script>
            export default {
              data() {
                return {
                  value: "import { ServerFactory } from \'@kenote/core\'\nimport ApplicationModule from \'./application.module\'\n\nasync function bootstrap () {\n  // 加载服务端引擎\n  let { ServiceEngine } = await import(\'@kente/express\')\n  // 创建服务并加载模块\n  let server = await ServerFactory(new ServiceEngine()).create(ApplicationModule)\n  // 将服务监听到 4000 端口\n  server.app.listen(4000)\n}\n\n// 启动服务\nbootstrap()\n",
                  width: "auto",
                  options: {
                    theme: "mdn-like",
                    contentType: "text/javascript",
                    lineNumbers: true,
                    tabSize: 2,
                    isCopy: true
                  }
                }
              }
            }
            </script>
      - key: json
        name: JSON
        codemirror:
          type: application/json
          code: |
            {
              "type": "codemirror",
              "value": "import { ServerFactory } from \'@kenote/core\'\nimport ApplicationModule from \'./application.module\'\n\nasync function bootstrap () {\n  // 加载服务端引擎\n  let { ServiceEngine } = await import(\'@kente/express\')\n  // 创建服务并加载模块\n  let server = await ServerFactory(new ServiceEngine()).create(ApplicationModule)\n  // 将服务监听到 4000 端口\n  server.app.listen(4000)\n}\n\n// 启动服务\nbootstrap()\n",
              "width": "auto",
              "options": {
                "theme": "mdn-like",
                "contentType": "text/javascript",
                "lineNumbers": true,
                "tabSize": 2,
                "isCopy": true
              }
            }
      - key: yaml
        name: Yaml
        codemirror:
          type: text/x-yaml
          code: |
            # 表单组件类型
            type: codemirror
            # 设定宽度
            width: auto
            # 附加属性
            options:
              theme: mdn-like
              contentType: text/javascript
              lineNumbers: true
              tabSize: 2
              isCopy: true
            # 绑定值
            value: |
              import { ServerFactory } from '@kenote/core'
              import ApplicationModule from './application.module'

              async function bootstrap () {
                // 加载服务端引擎
                let { ServiceEngine } = await import('@kente/express')
                // 创建服务并加载模块
                let server = await ServerFactory(new ServiceEngine()).create(ApplicationModule)
                // 将服务监听到 4000 端口
                server.app.listen(4000)
              }

              // 启动服务
              bootstrap()
    preview:
      component: web-form-item
      options:
        type: codemirror
        width: auto
        options:
          theme: mdn-like
          contentType: text/javascript
          lineNumbers: true
          tabSize: 2
          isCopy: true
      value: |
        import { ServerFactory } from '@kenote/core'
        import ApplicationModule from './application.module'

        async function bootstrap () {
          // 加载服务端引擎
          let { ServiceEngine } = await import('@kente/express')
          // 创建服务并加载模块
          let server = await ServerFactory(new ServiceEngine()).create(ApplicationModule)
          // 将服务监听到 4000 端口
          server.app.listen(4000)
        }

        // 启动服务
        bootstrap()
      callback: true
# 参数说明
attributes:
  - key: 1-1
    name: Attributes
    columns: *attributeColumns
    data:
      - name: value
        description: 绑定值
        type: string
      - name: placeholder
        description: 输入框占位文本
        type: string
      - name: width
        description: 设定宽度
        type: number / 'auto'
        default: 450
      - name: height
        description: 设定高度
        type: number
        default: 300
      - name: options
        description: 附加选项
        type: object
  - key: 1-2
    name: Options
    columns: *attributeColumns
    data:
      - name: theme
        description: 编辑器样式模版
        type: string
        option: default / base16-light / mdn-like / nord / monokai
        default: default
      - name: contentType
        description: 代码风格格式
        type: string
        default: application/json
      - name: lineNumbers
        description: 是否显示行号
        type: boolean
        default: false
      - name: lineWrapping
        description: 是否自动换行
        type: boolean
        default: false
      - name: tabSize
        description: Tab 空格数目
        type: number
        default: 4
      - name: readOnly
        description: 只读
        type: boolean
        default: false
      - name: isCopy
        description: 允许拷贝代码
        type: boolean
        default: false
      - name: copyright
        description: 拷贝代码时附带的版权信息
        type: string
  - key: 1-3
    name: Event
    columns: *eventColumns
    data:
      - name: change
        description: 值改变时触发
        callback: '(value: string)'